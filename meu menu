import React, { useState, useEffect, useRef } from "react";
import QRCode from "qrcode.react";
import { db, storage } from "./firebase";
import { collection, getDocs, addDoc, deleteDoc, doc, setDoc } from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";

const App = () => {
  const [items, setItems] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [newItem, setNewItem] = useState({ name: "", description: "", price: "", image: "", categoryId: "" });
  const [newCategory, setNewCategory] = useState({ name: "", image: "" });
  const [restaurant, setRestaurant] = useState({ name: "Meu Restaurante", logo: "", primaryColor: "#3498db" });
  const menuRef = useRef(null);

  // Buscar dados do Firestore
  useEffect(() => {
    const fetchData = async () => {
      const menuSnapshot = await getDocs(collection(db, "menu"));
      const menuItems = menuSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setItems(menuItems);

      const categoriesSnapshot = await getDocs(collection(db, "categories"));
      const categoriesData = categoriesSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setCategories(categoriesData);

      const settingsSnapshot = await getDocs(collection(db, "settings"));
      if (!settingsSnapshot.empty) {
        const settingsData = settingsSnapshot.docs[0].data();
        setRestaurant(settingsData);
      }
    };

    fetchData();
  }, []);

  // Adicionar item ao menu
  const addMenuItem = async () => {
    if (newItem.name && newItem.price && newItem.categoryId) {
      const docRef = await addDoc(collection(db, "menu"), newItem);
      setItems([...items, { id: docRef.id, ...newItem }]);
      setNewItem({ name: "", description: "", price: "", image: "", categoryId: "" });
    }
  };

  // Excluir item do menu
  const deleteMenuItem = async (id) => {
    await deleteDoc(doc(db, "menu", id));
    setItems(items.filter((item) => item.id !== id));
  };

  // Adicionar categoria
  const addCategory = async () => {
    if (newCategory.name) {
      const docRef = await addDoc(collection(db, "categories"), newCategory);
      setCategories([...categories, { id: docRef.id, ...newCategory }]);
      setNewCategory({ name: "", image: "" });
    }
  };

  // Excluir categoria
  const deleteCategory = async (id) => {
    await deleteDoc(doc(db, "categories", id));
    setCategories(categories.filter((category) => category.id !== id));
  };

  // Upload de imagem
  const uploadImage = async (file, path) => {
    const storageRef = ref(storage, path);
    await uploadBytes(storageRef, file);
    return await getDownloadURL(storageRef);
  };

  // Atualizar configurações do restaurante
  const updateRestaurantSettings = async () => {
    await setDoc(doc(db, "settings", "restaurant"), restaurant);
  };

  return (
    <div className="p-6 min-h-screen text-center" style={{ backgroundColor: restaurant.primaryColor }}>
      {restaurant.logo && <img src={restaurant.logo} alt="Logo" className="mx-auto mb-4 w-32 h-32 object-contain" />}
      <h1 className="text-3xl font-bold mb-6">{restaurant.name}</h1>
      <QRCode value={window.location.href} className="mx-auto mb-6" size={150} />

      {/* Configurações do Restaurante */}
      <div className="bg-white p-4 rounded-lg shadow-lg mb-6">
        <h2 className="text-xl font-semibold mb-4">Configurações do Restaurante</h2>
        <input
          type="text"
          placeholder="Nome do Restaurante"
          value={restaurant.name}
          onChange={(e) => setRestaurant({ ...restaurant, name: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="text"
          placeholder="URL da Logo"
          value={restaurant.logo}
          onChange={(e) => setRestaurant({ ...restaurant, logo: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="color"
          value={restaurant.primaryColor}
          onChange={(e) => setRestaurant({ ...restaurant, primaryColor: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <button
          onClick={updateRestaurantSettings}
          className="bg-green-500 text-white px-4 py-2 rounded-lg mt-2"
        >
          Salvar Configurações
        </button>
      </div>

      {/* Adicionar Categoria */}
      <div className="bg-white p-4 rounded-lg shadow-lg mb-6">
        <h2 className="text-xl font-semibold mb-4">Adicionar Categoria</h2>
        <input
          type="text"
          placeholder="Nome da Categoria"
          value={newCategory.name}
          onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="file"
          onChange={async (e) => {
            const file = e.target.files[0];
            if (file) {
              const imageUrl = await uploadImage(file, `categories/${file.name}`);
              setNewCategory({ ...newCategory, image: imageUrl });
            }
          }}
          className="border p-2 m-2 w-1/3"
        />
        <button
          onClick={addCategory}
          className="bg-blue-500 text-white px-4 py-2 rounded-lg mt-2"
        >
          Adicionar Categoria
        </button>
      </div>

      {/* Navegação entre Categorias */}
      <div className="flex overflow-x-auto mb-6">
        {categories.map((category) => (
          <button
            key={category.id}
            onClick={() => setSelectedCategory(category.id)}
            className={`flex-none p-4 mx-2 rounded-lg ${
              selectedCategory === category.id ? "bg-blue-500 text-white" : "bg-gray-200"
            }`}
          >
            {category.name}
          </button>
        ))}
      </div>

      {/* Adicionar Item ao Menu */}
      <div className="bg-white p-4 rounded-lg shadow-lg mb-6">
        <h2 className="text-xl font-semibold mb-4">Adicionar Item</h2>
        <input
          type="text"
          placeholder="Nome"
          value={newItem.name}
          onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="text"
          placeholder="Descrição"
          value={newItem.description}
          onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="number"
          placeholder="Preço"
          value={newItem.price}
          onChange={(e) => setNewItem({ ...newItem, price: e.target.value })}
          className="border p-2 m-2 w-1/3"
        />
        <input
          type="file"
          onChange={async (e) => {
            const file = e.target.files[0];
            if (file) {
              const imageUrl = await uploadImage(file, `menu/${file.name}`);
              setNewItem({ ...newItem, image: imageUrl });
            }
          }}
          className="border p-2 m-2 w-1/3"
        />
        <select
          value={newItem.categoryId}
          onChange={(e) => setNewItem({ ...newItem, categoryId: e.target.value })}
          className="border p-2 m-2 w-1/3"
        >
          <option value="">Selecione uma categoria</option>
          {categories.map((category) => (
            <option key={category.id} value={category.id}>
              {category.name}
            </option>
          ))}
        </select>
        <button
          onClick={addMenuItem}
          className="bg-blue-500 text-white px-4 py-2 rounded-lg mt-2"
        >
          Adicionar
        </button>
      </div>

      {/* Exibir Produtos por Categoria */}
      <div ref={menuRef} className="overflow-y-auto h-96 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {items
          .filter((item) => !selectedCategory || item.categoryId === selectedCategory)
          .map((item) => (
            <div key={item.id} className="bg-white p-4 rounded-lg shadow-lg relative">
              <button
                onClick={() => deleteMenuItem(item.id)}
                className="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded"
              >
                X
              </button>
              {item.image && (
                <div className="relative w-full h-40 overflow-hidden">
                  <img
                    src={item.image}
                    alt={item.name}
                    className="absolute w-full h-full object-cover animate-fade-move"
                  />
                </div>
              )}
              <h2 className="text-xl font-semibold mt-2">{item.name}</h2>
              <p className="text-gray-600">{item.description}</p>
              <p className="text-lg font-bold mt-2">R$ {parseFloat(item.price).toFixed(2)}</p>
            </div>
          ))}
      </div>
    </div>
  );
};

export default App;
